package ru.hse.edu.tukach;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardRemove;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.hse.edu.tukach.components.Buttons;
import ru.hse.edu.tukach.dto.application.ApplicationFromTelegramCreationDto;
import ru.hse.edu.tukach.dto.application.ApplicationLiteDto;
import ru.hse.edu.tukach.model.application.ApplicationType;
import ru.hse.edu.tukach.service.application.ApplicationService;

import java.util.List;

import static ru.hse.edu.tukach.components.BotCommands.LIST_OF_COMMANDS;

@RequiredArgsConstructor
public class TukachBot extends TelegramLongPollingBot {

    private final ApplicationService service;
    private ApplicationFromTelegramCreationDto application;

    void sendMessage(Message message, String textToSend, ReplyKeyboard markup) {
        SendMessage sendMessage = new SendMessage(); // Create a SendMessage object with mandatory fields
        sendMessage.setChatId(message.getChatId());
        sendMessage.setText(textToSend);
        sendMessage.enableHtml(true);
        sendMessage.disableWebPagePreview();
        ReplyKeyboardRemove remove = new ReplyKeyboardRemove(true);
        sendMessage.setReplyMarkup(remove);
        if (markup != null) {
            sendMessage.setReplyMarkup(markup);
        }
        try {
            execute(sendMessage); // Call method to send the message
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    void deleteMessage(Message originalMessage) {
        DeleteMessage message = new DeleteMessage(); // Create a SendMessage object with mandatory fields
        message.setChatId(originalMessage.getChatId().toString());
        message.setMessageId(originalMessage.getMessageId());
        try {
            execute(message); // Call method to send the message
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    void editMessage(Message originalMessage, String textToSend, InlineKeyboardMarkup markup) {
        EditMessageText editText = new EditMessageText();
        editText.setChatId(originalMessage.getChatId().toString());
        editText.setMessageId(originalMessage.getMessageId());
        editText.setText(textToSend);
        editText.enableHtml(true);
        editText.disableWebPagePreview();

        EditMessageReplyMarkup editMarkup = new EditMessageReplyMarkup();
        editMarkup.setMessageId(originalMessage.getMessageId());
        editMarkup.setChatId(originalMessage.getChatId().toString());
        if (markup != null) {
            editMarkup.setReplyMarkup(markup);
        }
        try {
            execute(editText); // Call method to send the message
            execute(editMarkup); // Call method to send the message
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void startCommandReceived(Message originalMessage) {
        String answer = "\uD83D\uDC4B–î–æ–±—Ä—ã–π –¥–µ–Ω—å, " + originalMessage.getChat().getFirstName() + "!\n" +
                "\uD83D\uDE0E–Ø –±–æ—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —ç—Ç–∏–∫–∏. " +
                "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º " +
                "–∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ.\n" +
                "‚ùì<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>";
        if (originalMessage.getFrom().getIsBot()) {
            editMessage(originalMessage, answer, Buttons.startInlineMarkup());
        }
        else {
            sendMessage(originalMessage, answer, Buttons.startInlineMarkup());
        }
    }

    private void requestCommandReceived(Message originalMessage) {
        String answer = "\uD83D\uDD25–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —ç—Ç–∏–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ " +
                "–±—É–¥–µ—Ç –∑–∞—â–∏—â–µ–Ω–∞ –∏ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:</b>";
        deleteMessage(originalMessage);
        sendMessage(originalMessage, answer, Buttons.typesKeyboardMarkup());
        this.application = new ApplicationFromTelegramCreationDto();
        this.application.setInitiatorTg(originalMessage.getChatId().toString());
        this.application.setCurrentField("type");
    }

    private void helpCommandReceived(Message originalMessage) {
        String answer = "üòä–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞—Ä—É—à–µ–Ω–∏–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —ç—Ç–∏–∫–∏. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n" +
            "‚Ä¢ \uD83E\uDD35\u200D‚ôÇ\uFE0F–í–∞—à–∏ –§–ò–û;\n" +
            "‚Ä¢ \uD83D\uDD54–í—Ä–µ–º—è –Ω–∞—Ä—É—à–µ–Ω–∏—è;\n" +
            "‚Ä¢ \uD83D\uDDFA–ú–µ—Å—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è;\n" +
            "‚Ä¢ \uD83D\uDCDD–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è;\n" +
            "‚Ä¢ üì∏–¢–∞–∫–∂–µ –≤—ã –∏–º–µ–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ –∏–º–µ—é—Ç—Å—è.\n\n" +
            "üì§–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"‚úç\uFE0F–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\" –∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ä.\n\n" +
            "\uD83D\uDE4F–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–µ—Å–∏—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–µ—Ç–∫–æ–π –∏ —è—Å–Ω–æ–π —Ñ–æ—Ä–º–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É. üïí\n\n" +
            "üëè–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é —ç—Ç–∏–∫—É –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞: @nikpeg. ü§ñ\n";
        if (originalMessage.getFrom().getIsBot()) {
            editMessage(originalMessage, answer, Buttons.homeInlineMarkup());
        }
        else {
            sendMessage(originalMessage, answer, Buttons.homeInlineMarkup());
        }
    }

    private void listCommandReceived(Message originalMessage) {
        List<ApplicationLiteDto> applications = service.getAllApplicationsByInitiatorTg(originalMessage.getChatId().toString());
        if (applications.isEmpty()) {
            String answer = "üí´–ü–æ–∫–∞ –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ.";
            editMessage(originalMessage, answer, Buttons.homeInlineMarkup());
        }
        else {
            String answer = "\uD83D\uDCD5–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –∑–∞—è–≤–æ–∫:";
            editMessage(originalMessage, answer, null);
            for (ApplicationLiteDto application : applications) {
                answer = "<b>–ó–∞—è–≤–∫–∞ ‚Ññ" + application.getId() + "</b>" +
                        "\n–¢–∏–ø –∑–∞—è–≤–∫–∏: " + application.getType() +
                        "\n–¢–µ–º–∞ –∑–∞—è–≤–∫–∏: " + application.getTopic() +
                        "\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: " + application.getStatus();
                sendMessage(originalMessage, answer, Buttons.moreInlineMarkup());
            }
            String more = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"\uD83D\uDC40–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏\" –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –∑–∞—è–≤–∫–æ–π, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π.";
            sendMessage(originalMessage, more, Buttons.homeInlineMarkup());
        }
    }

    private void unknownCommandReceived(Message originalMessage) {
        if (this.application != null && this.application.getInitiatorTg().equals(originalMessage.getChatId().toString())) {
            applicationCompletionReceived(originalMessage);
        }
        else {
            String answer = "\uD83E\uDD37\u200D‚ôÇ\uFE0F–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. " +
                    "<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π:</b>";
            sendMessage(originalMessage, answer, Buttons.startInlineMarkup());
        }
    }

    private void applicationCompletionReceived(Message originalMessage) {
        String answer = "";
        String messageText = originalMessage.getText();
        switch (this.application.getCurrentField()) {
            case "type":
                this.application.setType(ApplicationType.OTHER);
                for (ApplicationType type : ApplicationType.values()) {
                    if (messageText.endsWith(type.getMessage())) {
                        this.application.setType(type);
                        break;
                    }
                }
                this.application.setCurrentField("topic");
                answer = "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞—è–≤–∫–∏:";
                break;
            case "topic":
                this.application.setTopic(messageText);
                this.application.setCurrentField("description");
                answer = "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, imgbb.com):";
                break;
            case "description":
                this.application.setDescription(messageText);
                this.application.setCurrentField("fio");
                answer = "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û:";
                break;
            case "fio":
                this.application.setInitiatorFio(messageText);
                this.application.setCurrentField("all");
                answer = "‚ù§\uFE0F–°–ø–∞—Å–∏–±–æ, –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ:\n" +
                         "–¢–∏–ø –∑–∞—è–≤–∫–∏: " + this.application.getType() +
                         "\n–¢–µ–º–∞ –∑–∞—è–≤–∫–∏: " + this.application.getTopic() +
                         "\n–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: " + this.application.getDescription() +
                         "\n–í–∞—à–∏ –§–ò–û: " + this.application.getInitiatorFio() +
                         "\n<b>–ó–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ–∂–∏–¥–∞–π—Ç–µ!</b>";
                service.save(application);
                break;
            default:
                answer = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...";
                break;
        }
        sendMessage(originalMessage, answer, Buttons.homeInlineMarkup());
    }

    @Override
    public void onUpdateReceived(Update update) {
        String updateText;
        Message originalMessage;

        //–µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º
        if(update.hasMessage()) {
            originalMessage = update.getMessage();

            if (update.getMessage().hasText()) {
                updateText = update.getMessage().getText();
                botAnswerUtils(updateText, originalMessage);
            }

            //–µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –æ–¥–Ω–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞
        } else if (update.hasCallbackQuery()) {
            updateText = update.getCallbackQuery().getData();
            originalMessage = update.getCallbackQuery().getMessage();
            botAnswerUtils(updateText, originalMessage);
        }
    }

    private void botAnswerUtils(String callback, Message originalMessage) {
        switch (callback) {
            case "/start":
                startCommandReceived(originalMessage);
                break;
            case "request":
                requestCommandReceived(originalMessage);
                break;
            case "/help":
                helpCommandReceived(originalMessage);
                break;
            case "list":
                listCommandReceived(originalMessage);
                break;
            default:
                unknownCommandReceived(originalMessage);
                break;
        }
    }

    @Override
    public String getBotUsername() {
        return "TukachBot";
    }

    @Override
    public String getBotToken() {
        return "6799271405:AAEsMGd4ka3FbqTGC20xTUyEAx-gYbQcN7U";
    }
}
